---
swagger: '2.0'
info:
  version: v2
  title: Wio API v2
  description: |
    Wio IOT 平台是一款物联网应用平台，真正的WOT产品。Restful API帮助用户完成产品定义和部署。

    ## 端点
    API请求的端点为
        
        https://wio.seeed.io/v2
        https://wio.forkthings.com/v2 (test)
        
    所有的返回都为json格式。
        
        
    ## Token
    每个请求都需要带上认证信息，有两种方式携带认证信息。
    
    - 在`Header`添加`Authorization`，例如：
        
              Authorization: token 313be000160b425baf933d47e12b1e9e
        
    - 在请求参数中添加`access_token`，例如：
    
            https://wio.seeed.io/v2/user?access_token= 313be000160b425baf933d47e12b1e9e
            
    ## 响应码
    API完全遵循HTTP 状态码协议规定，不同响应码：
    
    状态码 | 描述
    ---|---
    200 | OK，正常响应
    201 | Created，资源创建成功
    202 | Accepted，请求已接受，后台服务正在处理
    302 | Retry，重定向
    400 | Error，出现错误，会带上错误消息
    403 | Forbidden，没有访问资源的权限
    404 | Not Found，没有发现资源
    405 | Method Not Allowed
    500 | Internal Server Error，系统错误，服务器停止
    
    ## 错误消息
    `status code：400`
    
          {
            "error": "Invalid user",
          }
        
    ## 时间格式
    时间采用`ISO8601`格式。如`YYYY-MM-DDTHH:MM:SSZ`
    
schemes:
  - https
host: wio.forkthings.com
tags:
  - name: users
  - name: things
  - name: firmwares
  - name: misellaneous
paths:
  /v2/user:
    get:
      tags:
        - users
      security:
        - access_token: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/user'
    delete:
      tags:
        - users
      security:
        - access_token: []
      responses:
        204:
          description: No Content
  /v2/users:
    get:
      tags:
        - users
      security:
        - access_token: []
      responses:
        200:
          description: OK
  /v2/users/{user_id}:
    get:
      tags:
        - users
      security:
        - access_token: []
      parameters:
        - name: user_id
          in: path
          description: ID of user
          required: true
          type: string
      responses:
        200:
          description: OK
  /v2/user/token:
    get:
      tags:
        - users
      security:
        - access_token: []
      responses:
        200:
          description: OK
  /v2/user/{user_id}/token:
    get:
      tags:
        - users
      security:
        - access_token: []
      parameters:
        - name: user_id
          in: path
          description: ID of user
          required: true
          type: string
      responses:
        200:
          description: OK
  
  /v2/things:
    get:
      tags:
        - things
      security:
        - access_token: []
      # summary: sd
      # description: sdf
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: '#/definitions/thing'
    post:
      tags:
        - things
      security:
        - access_token: []
      # summary: sdf
      # description: 12
      produces:
        - application/json
      parameters:
        - name: thing
          in: body
          # description: Pet to add to the store
          required: true
          schema:
            $ref: '#/definitions/newThing'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/thing'
  /v2/things/{thing_id}:
    parameters:
      - name: thing_id
        in: path
        description: ID of thing
        required: true
        type: string
    get:
      tags:
        - things
      security:
        - access_token: []
      summary: 获取节点设备信息
      # description:
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/thing'
    patch:
      tags:
        - things
      security:
        - access_token: []
      # summary:
      # description:
      parameters:
        - name: newThing
          in: body
          required: true
          schema:
            $ref: "#/definitions/newThing"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/thing'
    delete:
      tags:
        - things
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        204:
          description: No Content
  # /v2/things/{thing_id}/page:
  #   get:
  #     summary:
  #     description:
  #     responses:
  #       200:
  #         description: OK
  /v2/things/{thing_id}/ota:
    parameters:
      - name: thing_id
        in: path
        description: ID of thing
        required: true
        type: string
    get:
      tags:
        - things
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        200:
          description: OK
  
  /v2/firmwares:
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: "#/definitions/firmware"
    post:
      tags:
        - firmwares
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/firmware"
  /v2/firmwares/{firmware_id}:
    parameters:
      - name: firmware_id
        in: path
        description: ID of firmware
        required: true
        type: string
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/firmware"
    patch:
      tags:
        - firmwares
      security:
        - access_token: []
    #   summary:
    #   description:
      parameters:
        - name: modify
          in: body
          required: true
          schema:
            $ref: "#/definitions/newThing"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/firmware"
    delete:
      tags:
        - firmwares
      security:
        - access_token: []
    #   summary:
    #   description:
      responses:
        204:
          description: No Content
  /v2/firmwares/{firmware_id}/ulbs:
    parameters:
      - name: firmware_id
        in: path
        description: ID of firmware
        required: true
        type: string
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        200:
          description: OK
          schema:
            items:
              $ref: "#/definitions/ulb"
  /v2/firmwares/{firmware_id}/ulbs/{path_name}:
    parameters:
      - name: firmware_id
        in: path
        description: ID of firmware
        required: true
        type: string
      - name: path_name
        description: |
          ulb file relative path, such as `/foo/bar.cpp`
        in: path
        type: string
        required: true
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        200:
          description: OK
          schema:
            type: string
          examples:
            text: |
              #include "wio.h"
              #include "suli2.h"
              #include "Main.h"
              
              void setup()
              {
              }
              
              void loop()
              {
              
              }
    put:
      tags:
        - firmwares
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ulb"
    delete:
      tags:
        - firmwares
      security:
        - access_token: []
      # summary:
      # description:
      responses:
        204:
          description: No Content
  /v2/firmwares/{firmware_id}/bin:
    parameters:
      - name: firmware_id
        in: path
        description: ID of firmware
        required: true
        type: string
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      summary: 编译固件
      description: 系统会现查找是否存在已经编译好的固件，如果没有，则开始一个编译任务。因此会先返回`202 Accepted`, 当完成后会返回`201 Created`。
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/bin"
        202:
          description: Accepted
          schema:
            $ref: "#/definitions/binState"

  # /v2/firmwares/{firmware_id}/import:
    # parameters:
    #   - name: firmware_id
    #     in: path
    #     description: ID of firmware
    #     required: true
    #     type: string
  # /v2/firmwares/{firmware_id}/export:
    # parameters:
    #   - name: firmware_id
    #     in: path
    #     description: ID of firmware
    #     required: true
    #     type: string
    
  /v2/drivers:
    get:
      tags:
        - misellaneous
      # summary:
      # description:
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
                "drivers": [
                  {
                    "SKU": "105020005",
                    "ConstructArgList": [
                      "int pin"
                    ],
                    "Author": "SEEED",
                    "Writes": {
                      "write_onoff": {
                        "Arguments": [
                          [
                            "int",
                            "onoff"
                          ]
                        ]
                      }
                    },
                    "ClassName": "GroveEL",
                    "Events": {},
                    "Files": [
                      "grove_el_driver.h",
                      "grove_el_driver.cpp"
                    ],
                    "Description": "Grove - EL Driver is designed for driving EL Wires.It integrates a very small inverter to drive the EL Wire, so you can easily light up the EL Wire with just one single Grove cable.",
                    "AddedAt": 1443657600,
                    "HasPowerOffFunc": false,
                    "HasPowerOnFunc": false,
                    "InterfaceType": "GPIO",
                    "GroveName": "Grove-EL Driver",
                    "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-el-driver.jpg",
                    "CanGetLastError": false,
                    "HackGuideURL": "",
                    "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_EL_Driver",
                    "ClassFile": "grove_el_driver.h",
                    "Reads": {
                      "read_onoff_status": {
                        "Raw": [
                          "int *onoff"
                        ],
                        "Returns": [
                          [
                            "int",
                            "onoff"
                          ]
                        ],
                        "Arguments": []
                      }
                    },
                    "NeedHack": false,
                    "HasEvent": false,
                    "IncludePath": "grove_drivers/grove_el_driver"
                  }
                ]
              }
  /v2/boards:
    get:
      tags:
        - misellaneous
      # summary:
      # description:
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
                "boards": [
                  {
                    "board_platform": "ESP8266",
                    "board_flash_spi_mode": "QIO",
                    "board_builtin": {
                      "FUNCTION_KEY": 0,
                      "STATUS_LED": 2,
                      "GROVE_POWER_SWITCH": 15
                    },
                    "interfaces": {
                      "UART0": {
                        "pintx": 1,
                        "pinrx": 3,
                        "type": "UART"
                      },
                      "D2": {
                        "type": "GPIO",
                        "pin": 13
                      },
                      "A0": {
                        "type": "ANALOG",
                        "pin": 17
                      },
                      "I2C0": {
                        "pinscl": 5,
                        "type": "I2C",
                        "pinsda": 4
                      },
                      "D0": {
                        "type": "GPIO",
                        "pin": 14
                      },
                      "D1": {
                        "type": "GPIO",
                        "pin": 12
                      }
                    },
                    "board_name": "Wio Link v1.0",
                    "board_firmware_dir": "firmware_esp",
                    "board_flash_map": 6,
                    "board_vendor": "seeedstudio",
                    "board_flash_spi_speed": 40
                  },
                  {
                    "board_platform": "ESP8266",
                    "board_flash_spi_mode": "QIO",
                    "board_builtin": {
                      "FUNCTION_KEY": 0,
                      "STATUS_LED": 2,
                      "GROVE_POWER_SWITCH": 15
                    },
                    "interfaces": {
                      "A0": {
                        "type": "ANALOG",
                        "pin": 17
                      },
                      "UART0": {
                        "pintx": 1,
                        "pinrx": 3,
                        "type": "UART"
                      },
                      "I2C0": {
                        "pinscl": 3,
                        "type": "I2C",
                        "pinsda": 1
                      },
                      "I2C1": {
                        "pinscl": 5,
                        "type": "I2C",
                        "pinsda": 4
                      },
                      "D0": {
                        "type": "GPIO",
                        "pin": 3
                      },
                      "D1": {
                        "type": "GPIO",
                        "pin": 5
                      }
                    },
                    "board_name": "Wio Node v1.0",
                    "board_firmware_dir": "firmware_esp",
                    "board_flash_map": 6,
                    "board_vendor": "seeedstudio",
                    "board_flash_spi_speed": 40
                  }
                ]
              }
    
securityDefinitions:
  # Authorization:
  #   type: apiKey
  #   in: header
  #   name: Authorization
  access_token:
    type: apiKey
    in: query
    name: access_token
definitions:
  user:
    type: object
    properties:
      user_id:
        type: string
      created_at:
        type: string
        format: dateTime
    example:
      user_id: mbrXAWhtKocpgb5mp4XVZb7hz0x2
      created_at: 2016-11-21T02:25:01Z
  userToken:
    type: object
    properties:
      user_id:
        type: string
      token:
        type: string
      expire:
        type: string
        format: dateTime
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
  newThing:
    type: object
    required:
      - board
    properties:
      board:
        type: string
        enum:
          - Wio Link v1.0
          - Wio Node v1.0
      name:
        type: string
  thing:
    type: object
    properties:
      thing_id:
        type: string
      user_id:
        type: string
      firmware_id:
        type: string
      key:
        type: string
      name:
        type: string
      board:
        type: string
      online:
        type: boolean
      pp_id:
        type: string
      page_url:
        type: string
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
  firmware:
    type: object
    properties:
      firmware_id:
        type: string
      user_id:
        type: string
      name:
        type: string
      desc:
        type: string
      firmeare_type:
        type: string
      fixed_url:
        type: string
      bin_url:
        type: string
      size:
        type: string
      sha:
        type: string
      config:
        $ref: "#/definitions/config"
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
  config:
    type: object
    properties:
      board_name:
        type: string
      connections:
        type: array
        items:
          $ref: "#/definitions/connection"
    required:
      - board_name
      - connections
    example:
      board_name: Wio Link v1.0
      connections: []
  connection:
    type: object
    properties:
      sku:
        type: string
      port:
        type: string
    required:
      - sku
      - port
    example:
      sku: 101020019-ffff
      port: D0
  newConfig:
    type: object
    properties:
      board_name:
        type: string
        enum:
          - Wio Link v1.0
          - Wio Node v1.0
      connections:
        type: array
        items:
          $ref: "#/definitions/newConnection"
  newConnection:
    type: object
    properties:
      sku:
        type: string
      port:
        type: string
        enum:
          - D0
          - D1
          - D2
          - A0
          - A1
          - UART0
          - I2C0
          - I2C1
  ulb:
    type: object
    properties:
      firmware_id:
        type: string
      path:
        type: string
      name:
        type: string
      content:
        type: string
      encoding:
        type: string
        enum:
          - plain
          - base64
      size:
        type: integer
      sha:
        type: string
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
  binState:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - building
          - success
          - failure
      status_text:
        type: string
  bin: # TODO(ten), fix later
    type: object
    properties:
      status:
        type: string
    
