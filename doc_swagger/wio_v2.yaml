---
swagger: '2.0'
info:
  version: v2
  title: Wio API v2
  description: |
    Wio IOT 平台是一款物联网应用平台，真正的WOT产品。Restful API帮助用户完成产品定义和部署。

    ## 端点
    API请求的端点为

        https://wio.seeed.io/v2
        https://wio.forkthings.com/v2 (test)

    ## Token
    每个请求都需要带上认证信息，有两种方式携带认证信息。

    - 在`Header`添加`Authorization`，例如：

        Authorization: token 313be000160b425baf933d47e12b1e9e

    - 在请求参数中添加`access_token`，例如：

        https://wio.seeed.io/v2/user?access_token= 313be000160b425baf933d47e12b1e9e

    ## 响应码
    API完全遵循HTTP 状态码协议规定，不同响应码：

    状态码 | 描述
    ---|---
    200 | OK，正常响应
    201 | Created，资源创建成功
    202 | Accepted，请求已接受，后台服务正在处理
    302 | Retry，重定向
    400 | Error，出现错误，会带上错误消息
    403 | Forbidden，没有访问资源的权限
    404 | Not Found，没有发现资源
    405 | Method Not Allowed
    500 | Internal Server Error，系统错误，服务器停止

    ## 错误消息
    `status code：400`

        {
          "error": "Invalid user",
        }

    ## 时间格式
    时间采用`ISO8601`格式。如`YYYY-MM-DDTHH:MM:SSZ`
schemes:
  - https
host: wio.forkthings.com
basePath: /v2
tags:
  - name: users
  - name: things
  - name: firmwares
  - name: misellaneous
paths:
  /user:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
    get:
      tags:
        - users
      security:
        - access_token: []
      summary: 获取当前用户ID
      description: |
        根据提交的token找到当前用户，如果第一次登陆，则先传递token到SSO系统，认证成功后，存储用户到当前系统。
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/user'
    delete:
      tags:
        - users
      security:
        - access_token: []
      summary: 删除当前用户
      description: 同时会删除用户所有的节点设备和项目数据，请小心使用。
      responses:
        204:
          description: No Content
  /users:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
    get:
      tags:
        - users
      security:
        - access_token: []
      summary: 获取所有用户ID
      description: |
        以用户创建的时间顺序列出所有用户ID。
        > 只有认证用户为系统管理员时，才会返回所有用户信息。如何[添加管理员]()
      parameters:
        - name: page
          in: query
          type: integer
          description: 请求第几页
          required: false
        - name: per_page
          in: query
          type: integer
          description: 每一页的数量
          required: false
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/user'
  /users/{user_id}:  # Not use
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: user_id
        in: path
        description: 指定用户ID
        required: true
        type: string
    # get:
    #   tags:
    #     - users
    #   security:
    #     - access_token: []
    #   summary: 获取指定用户信息
    #   description: 需要此用户权限或者管理员权限
    #   responses:
    #     200:
    #       description: OK
    #       schema:
    #         $ref: '#/definitions/user'
    delete:
      tags:
        - users
      security:
        - access_token: []
      summary: 删除指定用户
      description: 需要此用户权限或者管理员权限
      responses:
        204:
          description: No Content
  /user/token:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
    get:
      tags:
        - users
      security:
        - access_token: []
      summary: 获取当前用户token信息
      description: ""
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/userToken'
  /user/{user_id}/token:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
    get:
      tags:
        - users
      security:
        - access_token: []
      parameters:
        - name: user_id
          in: path
          description: 用户ID
          required: true
          type: string
      summary: 获取指定用户token信息
      description: 需要此用户权限或者管理员权限
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/userToken'
  /things:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
    get:
      tags:
        - things
      security:
        - access_token: []
      parameters:
        - name: page
          in: query
          type: integer
          description: 请求第几页
          required: false
        - name: per_page
          in: query
          type: integer
          description: 每一页的数量
          required: false
        # - name: sort  # TODO(ten): desc
        #   in: query
        #   required: false
        #   type: array
        #   items:
        #     type: string
      summary: 列出当前用户的所有节点设备
      description: ""
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              things:
                type: array
                items:
                  $ref: '#/definitions/thing'
    post:
      tags:
        - things
      security:
        - access_token: []
      summary: 创建一个节点设备
      description: ""
      consumes:
        - application/json
      parameters:
        - name: thingParas
          in: body
          description: 创建节点设备参数
          required: true
          schema:
            $ref: '#/definitions/newThing'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/thing'
  /things/{thing_id}:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: thing_id
        in: path
        description: 节点设备ID
        required: true
        type: string
    get:
      tags:
        - things
      security:
        - access_token: []
      summary: 获取节点设备信息
      description: ""
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/thing'
    patch:
      tags:
        - things
      security:
        - access_token: []
      parameters:
        - name: newThing
          in: body
          required: true
          schema:
            $ref: "#/definitions/newThing"
      summary: 更新节点设备信息
      description: ""
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/thing'
    delete:
      tags:
        - things
      security:
        - access_token: []
      summary: 删除节点设备
      description: ""
      responses:
        204:
          description: No Content
  /things/{thing_id}/page:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: thing_id
        in: path
        description: 节点设备ID
        required: true
        type: string
    get:
      tags:
        - things
      security:
        - access_token: []
      summary: 获取节点设备的API页面
      description: ""
      produces:
        - text/html
      responses:
        200:
          description: OK, 通过html页面展示节点可用的Web API操作。
          schema:
            type: string
  /things/{thing_id}/ota:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: thing_id
        in: path
        description: 节点设备ID
        required: true
        type: string
    get:
      tags:
        - things
      security:
        - access_token: []
      summary: 获得当前的OTA信息
      description: |
        显示OTA的状态和定时OTA的时间等。
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ota'
    post:
      tags:
        - things
      security:
        - access_token: []
      parameters:
        - name: newOta
          in: body
          required: true
          schema:
            $ref: '#/definitions/newOta'
      summary: 立即或定时升级节点设备固件
      description: |
        - 当`ota_at`参数不在时，立即提交OTA操作
        - 当`ota_at`参数在，且大于当前时间时，提交定时OTA
      responses:
        200:
          description: OK 
          schema:
            $ref: '#/definitions/ota'
    patch:
      tags:
        - things
      security:
        - access_token: []
      parameters:
        - name: newOta
          in: body
          required: true
          schema:
            $ref: '#/definitions/updateOta'
      summary: 修改OTA设置
      description: |
        可以通过参数修改OTA时间，固件版本或者取消升级。
      responses:
        200:
          description: OK 
          schema:
            $ref: '#/definitions/ota'
  /firmwares:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      parameters:
        - name: page
          in: query
          type: integer
          description: 请求第几页
          required: false
        - name: per_page
          in: query
          type: integer
          description: 每一页的数量
          required: false
        # - name: sort  # TODO(ten)
        #   in: query
        #   type: string
      summary: 获取当前用户的所有固件项目
      description: ""
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              firmwares:
                type: array
                items:
                  $ref: '#/definitions/firmware'
    post:
      tags:
        - firmwares
      security:
        - access_token: []
      consumes:
        - application/json
      parameters:
        - name: firmwareParas
          in: body
          description: 创建固件项目参数
          required: true
          schema:
            $ref: '#/definitions/newFirmware'
      summary: 创建一个固件项目
      description: ""
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/firmware"
  /firmwares/{firmware_id}:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: firmware_id
        in: path
        description: 固件项目ID
        required: true
        type: string
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      summary: 获取指定固件项目信息
      description: ""
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/firmware"
    patch:
      tags:
        - firmwares
      security:
        - access_token: []
      consumes:
        - application/json
      parameters:
        - name: firmwareParas
          in: body
          required: true
          schema:
            $ref: "#/definitions/newFirmware"
      summary: 更新指定项目信息
      description: ""
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/firmware"
    delete:
      tags:
        - firmwares
      security:
        - access_token: []
      summary: 删除指定固件项目
      description: ""
      responses:
        204:
          description: No Content
  /firmwares/{firmware_id}/ulbs:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: firmware_id
        in: path
        description: 固件项目ID
        required: true
        type: string
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      summary:  获取当前用户的所有用户程序文件(ULB)
      description: ""
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            properties:
              ulbs:
                type: array
                items:
                  $ref: '#/definitions/ulb'
  /firmwares/{firmware_id}/ulbs/{path_name}:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: firmware_id
        in: path
        description: 固件项目ID
        required: true
        type: string
      - name: path_name
        description: |
          ulb文件相对路径，如`/foo/bar.cpp`
        in: path
        type: string
        required: true
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      parameters:
        - name: format
          description: |
            定义返回的数据格式，`raw`|`base64`，分别为直接返回text文本或者编码成base64格式。
          in: query
          type: string
          required: false
      summary: 获取指定的ULB文件
      description: ""
      produces:
        - text/plain
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: string
    put:
      tags:
        - firmwares
      security:
        - access_token: []
      consumes:
        - text/plain
      parameters:
        - name: text
          in: body
          required: true
          description: 代码文件text格式
          schema:
            type: string
      summary: 上传ULB文件
      description: ""
      produces:
        - application/json
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/ulb'
    delete:
      tags:
        - firmwares
      security:
        - access_token: []
      summary: 删除指定的ULB文件
      description: ""
      responses:
        204:
          description: No Content
  /firmwares/{firmware_id}/bin:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: firmware_id
        in: path
        description: 固件项目ID
        required: true
        type: string
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      summary: 编译固件
      description: |
        系统会现查找是否存在已经编译好的固件，如果没有，则开始一个编译任务。因此会先返回`202 Accepted`, 当完成后会返回`201 Created`。
        > 重复请求可以查询编译状态
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/bin"
        202:
          description: Accepted
          schema:
            $ref: "#/definitions/binState"
  /firmwares/{firmware_id}/import:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: firmware_id
        in: path
        description: 固件项目ID
        required: true
        type: string
    put:
      tags:
        - firmwares
      security:
        - access_token: []
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: |
            支持三种github链接
            - 主干`https://github.com/awong1900/Wio_Sample_Project`
            - 分支`https://github.com/awong1900/Wio_Sample_Project/tree/dev`
            - 标签`https://github.com/awong1900/Wio_Sample_Project/tree/v0.2.0`
          schema:
            type: object
            properties:
              github_url:
                type: string
                description: 需要导入的WIO项目的github链接
      summary: 导入WIO固件项目
      description: |
        由于导入过程需要一些时间，API会先响应`202`。直到完成导入，响应`201`.
        > 可以通过GET方法获得响应状态
      responses:
        202:
          description: Accepted
          schema:
            $ref: '#/definitions/firmwareImport'
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      summary: 获得固件项目导入状态
      description: ""
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/firmwareImport'
    post:
      tags:
        - firmwares
      security:
        - access_token: []
      summary: 同步GitHub最新的固件项目文件
      description: ""
      responses:
        202:
          description: OK
          schema:
            $ref: '#/definitions/firmwareImport'
  /firmwares/{firmware_id}/export:
    parameters:
      - name: Authorization
        in: header
        type: string
        description: |
          认证信息，以`token`开头空格后加上token,如`token your_token`
        required: false
      - name: firmware_id
        in: path
        description: 固件项目ID
        required: true
        type: string
    get:
      tags:
        - firmwares
      security:
        - access_token: []
      parameters:
        - name: format
          in: query
          description: 定义输出的格式，`zipball`(default)|`tarball`
          required: false
          type: string
      responses:
        200:
          description: OK
  /drivers:
    get:
      tags:
        - misellaneous
      summary: 输出WIO支持的驱动列表
      description: ""
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
                "drivers": [
                  {
                    "SKU": "105020005",
                    "ConstructArgList": [
                      "int pin"
                    ],
                    "Author": "SEEED",
                    "Writes": {
                      "write_onoff": {
                        "Arguments": [
                          [
                            "int",
                            "onoff"
                          ]
                        ]
                      }
                    },
                    "ClassName": "GroveEL",
                    "Events": {},
                    "Files": [
                      "grove_el_driver.h",
                      "grove_el_driver.cpp"
                    ],
                    "Description": "Grove - EL Driver is designed for driving EL Wires.It integrates a very small inverter to drive the EL Wire, so you can easily light up the EL Wire with just one single Grove cable.",
                    "AddedAt": 1443657600,
                    "HasPowerOffFunc": false,
                    "HasPowerOnFunc": false,
                    "InterfaceType": "GPIO",
                    "GroveName": "Grove-EL Driver",
                    "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-el-driver.jpg",
                    "CanGetLastError": false,
                    "HackGuideURL": "",
                    "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_EL_Driver",
                    "ClassFile": "grove_el_driver.h",
                    "Reads": {
                      "read_onoff_status": {
                        "Raw": [
                          "int *onoff"
                        ],
                        "Returns": [
                          [
                            "int",
                            "onoff"
                          ]
                        ],
                        "Arguments": []
                      }
                    },
                    "NeedHack": false,
                    "HasEvent": false,
                    "IncludePath": "grove_drivers/grove_el_driver"
                  }
                ]
              }
  /boards:
    get:
      tags:
        - misellaneous
      summary: 输出WIO支持的设备型号列表
      description: ""
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
                "boards": [
                  {
                    "board_platform": "ESP8266",
                    "board_flash_spi_mode": "QIO",
                    "board_builtin": {
                      "FUNCTION_KEY": 0,
                      "STATUS_LED": 2,
                      "GROVE_POWER_SWITCH": 15
                    },
                    "interfaces": {
                      "UART0": {
                        "pintx": 1,
                        "pinrx": 3,
                        "type": "UART"
                      },
                      "D2": {
                        "type": "GPIO",
                        "pin": 13
                      },
                      "A0": {
                        "type": "ANALOG",
                        "pin": 17
                      },
                      "I2C0": {
                        "pinscl": 5,
                        "type": "I2C",
                        "pinsda": 4
                      },
                      "D0": {
                        "type": "GPIO",
                        "pin": 14
                      },
                      "D1": {
                        "type": "GPIO",
                        "pin": 12
                      }
                    },
                    "board_name": "Wio Link v1.0",
                    "board_firmware_dir": "firmware_esp",
                    "board_flash_map": 6,
                    "board_vendor": "seeedstudio",
                    "board_flash_spi_speed": 40
                  },
                  {
                    "board_platform": "ESP8266",
                    "board_flash_spi_mode": "QIO",
                    "board_builtin": {
                      "FUNCTION_KEY": 0,
                      "STATUS_LED": 2,
                      "GROVE_POWER_SWITCH": 15
                    },
                    "interfaces": {
                      "A0": {
                        "type": "ANALOG",
                        "pin": 17
                      },
                      "UART0": {
                        "pintx": 1,
                        "pinrx": 3,
                        "type": "UART"
                      },
                      "I2C0": {
                        "pinscl": 3,
                        "type": "I2C",
                        "pinsda": 1
                      },
                      "I2C1": {
                        "pinscl": 5,
                        "type": "I2C",
                        "pinsda": 4
                      },
                      "D0": {
                        "type": "GPIO",
                        "pin": 3
                      },
                      "D1": {
                        "type": "GPIO",
                        "pin": 5
                      }
                    },
                    "board_name": "Wio Node v1.0",
                    "board_firmware_dir": "firmware_esp",
                    "board_flash_map": 6,
                    "board_vendor": "seeedstudio",
                    "board_flash_spi_speed": 40
                  }
                ]
              }
securityDefinitions:
  # Authorization:  # TODO(ten), try use header to auth
  #   type: apiKey
  #   in: header
  #   name: Authorization
  access_token:
    type: apiKey
    in: query
    name: access_token
definitions:
  # errorMessage:
  #   type: object
  #   properties:
  #     error:
  #       type: string
  user:
    type: object
    properties:
      user_id:
        type: string
      created_at:
        type: string
        format: dateTime
    example:
      user_id: mbrXAWhtKocpgb5mp4XVZb7hz0x2
      created_at: 2016-11-21T02:25:01Z
  userToken:
    type: object
    properties:
      token:
        type: string
      user_id:
        type: string
      expire:
        type: string
        format: dateTime
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
    example:
      user_id: mbrXAWhtKocpgb5mp4XVZb7hz0x2
      token: Mev326aO4gODGY0exYt4bmDmX7u2
      expire: 2016-11-22T02:25:01Z
      created_at: 2016-11-21T02:25:01Z
      updated_at: 2016-11-21T02:25:01Z
  newThing:
    type: object
    required:
      - board
    properties:
      board:
        type: string
        enum:
          - Wio Link v1.0
          - Wio Node v1.0
        description: "节点设备型号"
      name:
        type: string
        description: "节点设备名字"
    example:
      board: Wio Link v1.0
      name: wio01
  thing:
    type: object
    properties:
      thing_id:
        type: string
      user_id:
        type: string
      firmware_id:
        type: string
      key:
        type: string
      name:
        type: string
      board:
        type: string
      online:
        type: boolean
      pp_id:
        type: string
      page_url:
        type: string
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
    example:
      thing_id: 12a9d0922562456a9fdf0b55c20b29ea
      user_id: 160979
      firmware_id: ""
      key: 6eb8cccd6a7b48a5ba842c3f22683cea
      name: wio01
      board: WioLink v1.0
      online: false
      pp_id: ""
      page_url: http://localhost:16080/v2/things/12a9d0922562456a9fdf0b55c20b29ea/page
      created_at: 2016-11-21T03:27:04Z
      updated_at: 2016-11-21T03:27:04Z
  ota:
    type: object
    properties:
      thing_id:
        type: string
      firmware_id:
        type: string
      ota_at:
        type: string
        format: dateTime
      status:
        type: string
        enum:
          - ""
          - pending
          - queue
          - processing
          - succeeded
          - failed
      status_text:
        type: string
      updated_at:
        type: string
        format: dateTime
    example:
      thing_id: 049f867bad4f4f0db302df7798cd94e6
      firmware_id: ad144ec3505641e29555e7de25aeaa08
      ota_at: 2016-12-20T00:00:00Z
      status: pending
      status_text: waiting to be scheduled
      updated_at: 2016-11-21T10:11:28Z
  newOta:
    type: object
    properties:
      firmware_id:
        type: string
      ota_at:
        type: string
        format: dateTime
    required:
      - firmware_id
    example:
      firmware_id: ad144ec3505641e29555e7de25aeaa08
      ota_at: 2016-12-20T00:00:00Z
  updateOta:
    type: object
    properties:
      firmware_id:
        type: string
      ota_at:
        type: string
        format: dateTime
    example:
      firmware_id: ad144ec3505641e29555e7de25aeaa08
      ota_at: 2016-12-20T00:00:00Z
  firmware:
    type: object
    properties:
      firmware_id:
        type: string
      user_id:
        type: string
      name:
        type: string
      desc:
        type: string
      firmeare_type:
        type: string
      fixed_url:
        type: string
      bin_url:
        type: string
      size:
        type: string
      sha:
        type: string
      config:
        $ref: "#/definitions/config"
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
    example:
      firmware_id: a6c91046291049e9a9357dd535c91598
      user_id: 160979
      name: Hello-World
      desc: First firmware
      firmware_type: flexible
      fixed_url: ""
      bin_url: ""
      size: ""
      sha: ""
      config:
        board_name: Wio Link v1.0
        connections: []
      created_at: 2016-11-21T03:41:52Z
      updated_at: 2016-11-21T03:41:52Z
  newFirmware:
    type: object
    properties:
      name:
        type: string
      desc:
        type: string
      config:
        $ref: "#/definitions/config"
    example:
      name: myWioFirmware
      desc: First firmware
      config: {
      	board_name: Wio Link v1.0,
      	connections: [
      	  {sku: 101020019-ffff, port: D0}
        ]
      }
  config:
    type: object
    properties:
      board_name:
        type: string
      connections:
        type: array
        items:
          $ref: "#/definitions/connection"
    required:
      - board_name
      - connections
    example:
      board_name: Wio Link v1.0
      connections: [
        {sku: 101020019-ffff, port: D0}
      ]
  connection:
    type: object
    properties:
      sku:
        type: string
      port:
        type: string
    required:
      - sku
      - port
    example:
      sku: 101020019-ffff
      port: D0
  # newConfig:
  #   type: object
  #   properties:
  #     board_name:
  #       type: string
  #       enum:
  #         - Wio Link v1.0
  #         - Wio Node v1.0
  #     connections:
  #       type: array
  #       items:
  #         $ref: "#/definitions/newConnection"
  # newConnection:
  #   type: object
  #   properties:
  #     sku:
  #       type: string
  #     port:
  #       type: string
  #       enum:
  #         - D0
  #         - D1
  #         - D2
  #         - A0
  #         - A1
  #         - UART0
  #         - I2C0
  #         - I2C1
  ulb:
    type: object
    properties:
      firmware_id:
        type: string
      path:
        type: string
      name:
        type: string
      content:
        type: string
      encoding:
        type: string
        enum:
          - plain
          - base64
      size:
        type: integer
      sha:
        type: string
      created_at:
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
    example:
      firmware_id: a6c91046291049e9a9357dd535c91598
      path: gen.cpp
      name: gen.cpp
      content: "\n#include \"suli2.h\"\n#include \"rpc_server.h\"\n#include \"rpc_stream.h\"\n#include \"Main.h\"\n\n\n\nvoid rpc_server_register_resources()\n{\n\n}\n\n"
      encoding: plain
      size: 132
      sha: 05e7ba1a58a00342e916da97567c6a610ae5ade7
      created_at: 2016-11-21T03:41:52Z
      updated_at: 2016-11-21T03:41:52Z
  binState:
    type: object
    properties:
      status:
        type: string
        enum:
          - building
          - success
          - failure
      status_text:
        type: string
    required:
      - status
    example:
      status: building
  bin: # TODO(ten), fix later
    type: object
    properties:
      status:
        type: string
  firmwareImport:
    type: object
    properties:
      firmware_id:
        type: string
      github_url: 
        type: string
      status:
        type: string
        enum:
          - pending
          - importing
          # TODO(ten), more status
      status_text: 
        type: string
      created_at: 
        type: string
        format: dateTime
      updated_at:
        type: string
        format: dateTime
    example:
      firmware_id: ad144ec3505641e29555e7de25aeaa08
      github_url: https://github.com/awong1900/Wio_Sample_Project
      status: pending
      status_text: waiting import...
      created_at: 2016-11-22T06:56:12Z
      updated_at: 2016-11-22T06:56:12Z