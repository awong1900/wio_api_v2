{
    "swagger": "2.0",
    "info": {
        "version": "v2",
        "title": "Wio API v2",
        "description": "> 切换语言: [`EN`](https://awong1900.github.io/wio_api_v2/)\n\nWio IOT 平台是一款物联网应用平台，真正的WOT产品。Restful API帮助用户完成产品定义和部署。\n\n## 在线测试\n1. 从Seeed SSO获得token，https://wio.seeed.io/login\n\n2. 点击右上角`Authorize`填写认证token\n\n3. 现在就可以使用Wio API了\n\n## 端点\nAPI请求的端点为\n\n    https://wio.seeed.io/v2\n    https://wio.forkthings.com/v2 (test)\n\n## 认证\n每个请求都需要带上认证信息，有两种方式携带认证信息。\n\n- 在`Header`添加`Authorization`，例如：\n\n     curl -H \"Authorization: token YOUR-TOKEN\" https://wio.seeed.io/v2\n\n- 在请求参数中添加`access_token`，例如：\n\n    curl https://wio.seeed.io/v2?access_token=YOUR-TOKEN\n\n## 请求方法\nStandard HTTP verbs to indicate intent of a request:\n\nVerbs | Description\n---|---\nGET | Retrieve a resource or a collection of resources\nPOST | Create a resource\nPATCH | Modify a resource\nPUT | Set a resource\n\n## 响应码\nAPI完全遵循HTTP 状态码协议规定，不同响应码：\n\n状态码 | 描述\n---|---\n200 | OK，正常响应\n201 | Created，资源创建成功\n202 | Accepted，请求已接受，后台服务正在处理\n302 | Retry，重定向\n400 | Bad Request，出现错误，会带上错误消息\n401 | Unauthorized\n403 | Forbidden，没有访问资源的权限\n404 | Not Found，没有发现资源\n405 | Method Not Allowed\n500 | Internal Server Error，系统错误，服务器停止\n\n## 错误消息\n`status code：400`\n\n    {\n      \"error\": \"Invalid user\",\n    }\n\n## 时间格式\n时间采用`ISO8601`格式。如`YYYY-MM-DDTHH:MM:SSZ`\n"
    },
    "schemes": [
        "https"
    ],
    "host": "wio.forkthings.com",
    "basePath": "/v2",
    "consumes": [
        "application/json",
        "text/plain"
    ],
    "produces": [
        "application/json",
        "text/plain",
        "text/html"
    ],
    "tags": [
        {
            "name": "users"
        },
        {
            "name": "things"
        },
        {
            "name": "firmwares"
        },
        {
            "name": "misellaneous"
        }
    ],
    "paths": {
        "/user": {
            "get": {
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获取当前用户ID",
                "description": "根据提交的token找到当前用户，如果第一次登陆，则先传递token到SSO系统，认证成功后，存储用户到当前系统。\n",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "删除当前用户",
                "description": "同时会删除用户所有的节点设备和项目数据，请小心使用。",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获取所有用户ID",
                "description": "以用\n> 只有认证用户为系统管理员时，才会返回所有用户信息。如何[添加管理员]()\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/page"
                    },
                    {
                        "$ref": "#/parameters/per_page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "users": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/user"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "parameters": [
                {
                    "$ref": "#/parameters/user_id"
                }
            ],
            "delete": {
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "删除指定用户",
                "description": "需要此用户权限或者管理员权限",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/token": {
            "get": {
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获取当前用户token信息",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userToken"
                        }
                    }
                }
            }
        },
        "/user/{user_id}/token": {
            "get": {
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/user_id"
                    }
                ],
                "summary": "获取指定用户token信息",
                "description": "需要此用户权限或者管理员权限",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userToken"
                        }
                    }
                }
            }
        },
        "/things": {
            "get": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/page"
                    },
                    {
                        "$ref": "#/parameters/per_page"
                    }
                ],
                "summary": "列出当前用户的所有节点设备",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "things": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/thing"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "创建一个节点设备",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "thingParas",
                        "in": "body",
                        "description": "创建节点设备参数",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newThing"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/thing"
                        }
                    }
                }
            }
        },
        "/things/{thing_id}": {
            "parameters": [
                {
                    "$ref": "#/parameters/thing_id"
                }
            ],
            "get": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获取节点设备信息",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/thing"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "name": "newThing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newThing"
                        }
                    }
                ],
                "summary": "更新节点设备信息",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/thing"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "删除节点设备",
                "description": "",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/things/{thing_id}/page": {
            "parameters": [
                {
                    "$ref": "#/parameters/thing_id"
                }
            ],
            "get": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获取节点设备的API页面",
                "description": "",
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "OK, 通过html页面展示节点可用的Web API操作。",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/things/{thing_id}/ota": {
            "parameters": [
                {
                    "$ref": "#/parameters/thing_id"
                }
            ],
            "get": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获得当前的OTA信息",
                "description": "显示OTA的状态和定时OTA的时间等。\n",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ota"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "name": "newOta",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newOta"
                        }
                    }
                ],
                "summary": "立即或定时升级节点设备固件",
                "description": "- 当`ota_at`参数不在时，立即提交OTA操作\n- 当`ota_at`参数在，且大于当前时间时，提交定时OTA\n",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ota"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "things"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "name": "newOta",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateOta"
                        }
                    }
                ],
                "summary": "修改OTA设置",
                "description": "可以通过参数修改OTA时间，固件版本或者取消升级。\n",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ota"
                        }
                    }
                }
            }
        },
        "/firmwares": {
            "get": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/page"
                    },
                    {
                        "$ref": "#/parameters/per_page"
                    }
                ],
                "summary": "获取当前用户的所有固件项目",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "firmwares": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/firmware"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "firmwareParas",
                        "in": "body",
                        "description": "创建固件项目参数",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newFirmware"
                        }
                    }
                ],
                "summary": "创建一个固件项目",
                "description": "",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/firmware"
                        }
                    }
                }
            }
        },
        "/firmwares/{firmware_id}": {
            "parameters": [
                {
                    "$ref": "#/parameters/firmware_id"
                }
            ],
            "get": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获取指定固件项目信息",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/firmware"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "firmwareParas",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newFirmware"
                        }
                    }
                ],
                "summary": "更新指定项目信息",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/firmware"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "删除指定固件项目",
                "description": "",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/firmwares/{firmware_id}/ulbs": {
            "parameters": [
                {
                    "$ref": "#/parameters/firmware_id"
                }
            ],
            "get": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获取当前用户的所有用户程序文件(ULB)",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "title": "response",
                            "properties": {
                                "ulbs": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ulb"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/firmwares/{firmware_id}/ulbs/{path_name}": {
            "parameters": [
                {
                    "$ref": "#/parameters/firmware_id"
                },
                {
                    "name": "path_name",
                    "description": "ulb文件相对路径，如`/foo/bar.cpp`\n",
                    "in": "path",
                    "type": "string",
                    "required": true
                }
            ],
            "get": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "name": "format",
                        "description": "定义返回的数据格式，`raw`|`base64`，分别为直接返回text文本或者编码成base64格式。\n",
                        "in": "query",
                        "type": "string",
                        "required": false
                    }
                ],
                "summary": "获取指定的ULB文件",
                "description": "",
                "produces": [
                    "text/plain",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "consumes": [
                    "text/plain"
                ],
                "parameters": [
                    {
                        "name": "text",
                        "in": "body",
                        "required": true,
                        "description": "代码文件text格式",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "上传ULB文件",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ulb"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "删除指定的ULB文件",
                "description": "",
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/firmwares/{firmware_id}/bin": {
            "parameters": [
                {
                    "$ref": "#/parameters/firmware_id"
                }
            ],
            "get": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "编译固件",
                "description": "系统会现查找是否存在已经编译好的固件，如果没有，则开始一个编译任务。因此会先返回`202 Accepted`, 当完成后会返回`201 Created`。\n> 重复请求可以查询编译状态\n",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/bin"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/binState"
                        }
                    }
                }
            }
        },
        "/firmwares/{firmware_id}/import": {
            "parameters": [
                {
                    "$ref": "#/parameters/firmware_id"
                }
            ],
            "put": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "支持三种github链接\n- 主干`https://github.com/awong1900/Wio_Sample_Project`\n- 分支`https://github.com/awong1900/Wio_Sample_Project/tree/dev`\n- 标签`https://github.com/awong1900/Wio_Sample_Project/tree/v0.2.0`\n",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "github_url": {
                                    "type": "string",
                                    "description": "需要导入的WIO项目的github链接"
                                }
                            }
                        }
                    }
                ],
                "summary": "导入WIO固件项目",
                "description": "由于导入过程需要一些时间，API会先响应`202`。直到完成导入，响应`201`.\n> 可以通过GET方法获得响应状态\n",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/firmwareImport"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "获得固件项目导入状态",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/firmwareImport"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "同步GitHub最新的固件项目文件",
                "description": "",
                "responses": {
                    "202": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/firmwareImport"
                        }
                    }
                }
            }
        },
        "/firmwares/{firmware_id}/export": {
            "parameters": [
                {
                    "$ref": "#/parameters/firmware_id"
                }
            ],
            "get": {
                "tags": [
                    "firmwares"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "定义输出的格式，`zipball`(default)|`tarball`",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/drivers": {
            "get": {
                "tags": [
                    "misellaneous"
                ],
                "summary": "输出WIO支持的驱动列表",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "examples": {
                            "application/json": {
                                "drivers": [
                                    {
                                        "SKU": "105020005",
                                        "ConstructArgList": [
                                            "int pin"
                                        ],
                                        "Author": "SEEED",
                                        "Writes": {
                                            "write_onoff": {
                                                "Arguments": [
                                                    [
                                                        "int",
                                                        "onoff"
                                                    ]
                                                ]
                                            }
                                        },
                                        "ClassName": "GroveEL",
                                        "Events": {},
                                        "Files": [
                                            "grove_el_driver.h",
                                            "grove_el_driver.cpp"
                                        ],
                                        "Description": "Grove - EL Driver is designed for driving EL Wires.It integrates a very small inverter to drive the EL Wire, so you can easily light up the EL Wire with just one single Grove cable.",
                                        "AddedAt": 1443657600,
                                        "HasPowerOffFunc": false,
                                        "HasPowerOnFunc": false,
                                        "InterfaceType": "GPIO",
                                        "GroveName": "Grove-EL Driver",
                                        "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-el-driver.jpg",
                                        "CanGetLastError": false,
                                        "HackGuideURL": "",
                                        "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_EL_Driver",
                                        "ClassFile": "grove_el_driver.h",
                                        "Reads": {
                                            "read_onoff_status": {
                                                "Raw": [
                                                    "int *onoff"
                                                ],
                                                "Returns": [
                                                    [
                                                        "int",
                                                        "onoff"
                                                    ]
                                                ],
                                                "Arguments": []
                                            }
                                        },
                                        "NeedHack": false,
                                        "HasEvent": false,
                                        "IncludePath": "grove_drivers/grove_el_driver"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/boards": {
            "get": {
                "tags": [
                    "misellaneous"
                ],
                "summary": "输出WIO支持的设备型号列表",
                "description": "",
                "responses": {
                    "200": {
                        "description": "OK",
                        "examples": {
                            "application/json": {
                                "boards": [
                                    {
                                        "board_platform": "ESP8266",
                                        "board_flash_spi_mode": "QIO",
                                        "board_builtin": {
                                            "FUNCTION_KEY": 0,
                                            "STATUS_LED": 2,
                                            "GROVE_POWER_SWITCH": 15
                                        },
                                        "interfaces": {
                                            "UART0": {
                                                "pintx": 1,
                                                "pinrx": 3,
                                                "type": "UART"
                                            },
                                            "D2": {
                                                "type": "GPIO",
                                                "pin": 13
                                            },
                                            "A0": {
                                                "type": "ANALOG",
                                                "pin": 17
                                            },
                                            "I2C0": {
                                                "pinscl": 5,
                                                "type": "I2C",
                                                "pinsda": 4
                                            },
                                            "D0": {
                                                "type": "GPIO",
                                                "pin": 14
                                            },
                                            "D1": {
                                                "type": "GPIO",
                                                "pin": 12
                                            }
                                        },
                                        "board_name": "Wio Link v1.0",
                                        "board_firmware_dir": "firmware_esp",
                                        "board_flash_map": 6,
                                        "board_vendor": "seeedstudio",
                                        "board_flash_spi_speed": 40
                                    },
                                    {
                                        "board_platform": "ESP8266",
                                        "board_flash_spi_mode": "QIO",
                                        "board_builtin": {
                                            "FUNCTION_KEY": 0,
                                            "STATUS_LED": 2,
                                            "GROVE_POWER_SWITCH": 15
                                        },
                                        "interfaces": {
                                            "A0": {
                                                "type": "ANALOG",
                                                "pin": 17
                                            },
                                            "UART0": {
                                                "pintx": 1,
                                                "pinrx": 3,
                                                "type": "UART"
                                            },
                                            "I2C0": {
                                                "pinscl": 3,
                                                "type": "I2C",
                                                "pinsda": 1
                                            },
                                            "I2C1": {
                                                "pinscl": 5,
                                                "type": "I2C",
                                                "pinsda": 4
                                            },
                                            "D0": {
                                                "type": "GPIO",
                                                "pin": 3
                                            },
                                            "D1": {
                                                "type": "GPIO",
                                                "pin": 5
                                            }
                                        },
                                        "board_name": "Wio Node v1.0",
                                        "board_firmware_dir": "firmware_esp",
                                        "board_flash_map": 6,
                                        "board_vendor": "seeedstudio",
                                        "board_flash_spi_speed": 40
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/driver-test": {
            "post": {
                "tags": [
                    "misellaneous"
                ],
                "security": [
                    {
                        "Authorization": []
                    },
                    {
                        "access_token": []
                    }
                ],
                "summary": "测试编译用户自开发模块驱动",
                "description": "用户可为第三方模块编写驱动，参考[Wio v1.0驱动开发指南](https://github.com/Seeed-Studio/Wio_Link/wiki/How-to-write-module-driver-for-Wio-Link%3F)。编写完成后，使用此API测试驱动是否正常工作。此API接收驱动源代码，检查源代码正确性，并自动创建一个固件以供用户OTA到硬件进行测试。",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "driverSrcs",
                        "in": "body",
                        "description": "The list of driver source code.",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/driverSrc"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Passed the static check and created a firmware project.",
                        "schema": {
                            "$ref": "#/definitions/driverObject"
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Authorization": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "认证信息，通过Authorizatin头的方式添加token。以`token`开头空格后加上token,如`token your_token`\n"
        },
        "access_token": {
            "type": "apiKey",
            "name": "access_token",
            "in": "query",
            "description": "认证信息，通过query参数access_token方式添加token。\n"
        }
    },
    "parameters": {
        "user_id": {
            "name": "user_id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "type": "string"
        },
        "thing_id": {
            "name": "thing_id",
            "in": "path",
            "description": "节点设备ID",
            "required": true,
            "type": "string"
        },
        "firmware_id": {
            "name": "firmware_id",
            "in": "path",
            "description": "固件项目ID",
            "required": true,
            "type": "string"
        },
        "page": {
            "name": "page",
            "in": "query",
            "description": "请求第几页",
            "default": 1,
            "required": false,
            "type": "integer"
        },
        "per_page": {
            "name": "per_page",
            "in": "query",
            "description": "每一页的数量",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "type": "integer",
            "required": false
        }
    },
    "definitions": {
        "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "UTC and formatted as ISO8601",
            "example": "2016-12-28T12:05:05.000Z"
        },
        "user": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "example": "mbrXAWhtKocpgb5mp4XVZb7hz0x2"
                },
                "created_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "userToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "mbrXAWhtKocpgb5mp4XVZb7hz0x2"
                },
                "user_id": {
                    "type": "string",
                    "example": "Mev326aO4gODGY0exYt4bmDmX7u2"
                },
                "expire": {
                    "$ref": "#/definitions/timestamp"
                },
                "created_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "updated_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "newThing": {
            "type": "object",
            "required": [
                "board"
            ],
            "properties": {
                "board": {
                    "type": "string",
                    "enum": [
                        "Wio Link v1.0",
                        "Wio Node v1.0"
                    ],
                    "description": "thing board model",
                    "example": "Wio Link v1.0"
                },
                "name": {
                    "type": "string",
                    "description": "thing name",
                    "example": "wio01"
                }
            }
        },
        "thing": {
            "type": "object",
            "properties": {
                "thing_id": {
                    "type": "string",
                    "example": "12a9d0922562456a9fdf0b55c20b29ea"
                },
                "user_id": {
                    "type": "string",
                    "example": 160979
                },
                "firmware_id": {
                    "type": "string",
                    "example": ""
                },
                "key": {
                    "type": "string",
                    "example": "6eb8cccd6a7b48a5ba842c3f22683cea"
                },
                "name": {
                    "type": "string",
                    "example": "wio01"
                },
                "board": {
                    "type": "string",
                    "example": "WioLink v1.0"
                },
                "online": {
                    "type": "boolean",
                    "example": false
                },
                "pp_id": {
                    "type": "string",
                    "example": ""
                },
                "page_url": {
                    "type": "string",
                    "example": "http://localhost:16080/v2/things/12a9d0922562456a9fdf0b55c20b29ea/page"
                },
                "created_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "updated_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "ota": {
            "type": "object",
            "properties": {
                "thing_id": {
                    "type": "string",
                    "example": "049f867bad4f4f0db302df7798cd94e6"
                },
                "firmware_id": {
                    "type": "string",
                    "example": "ad144ec3505641e29555e7de25aeaa08"
                },
                "ota_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "",
                        "pending",
                        "queue",
                        "processing",
                        "succeeded",
                        "failed"
                    ],
                    "example": "pending"
                },
                "status_text": {
                    "type": "string",
                    "example": "waiting to be scheduled"
                },
                "updated_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "newOta": {
            "type": "object",
            "properties": {
                "firmware_id": {
                    "type": "string",
                    "example": "ad144ec3505641e29555e7de25aeaa08"
                },
                "ota_at": {
                    "$ref": "#/definitions/timestamp"
                }
            },
            "required": [
                "firmware_id"
            ]
        },
        "updateOta": {
            "type": "object",
            "properties": {
                "firmware_id": {
                    "type": "string",
                    "example": "ad144ec3505641e29555e7de25aeaa08"
                },
                "ota_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "firmware": {
            "type": "object",
            "properties": {
                "firmware_id": {
                    "type": "string",
                    "example": "a6c91046291049e9a9357dd535c91598"
                },
                "user_id": {
                    "type": "string",
                    "example": 160979
                },
                "name": {
                    "type": "string",
                    "example": "Hello-World"
                },
                "desc": {
                    "type": "string",
                    "example": "First firmware"
                },
                "firmeare_type": {
                    "type": "string",
                    "example": "flexible"
                },
                "fixed_url": {
                    "type": "string",
                    "example": ""
                },
                "bin_url": {
                    "type": "string",
                    "example": ""
                },
                "size": {
                    "type": "string",
                    "example": 120000
                },
                "sha": {
                    "type": "string",
                    "example": ""
                },
                "config": {
                    "$ref": "#/definitions/config"
                },
                "created_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "updated_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "newFirmware": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "myWioFirmware"
                },
                "desc": {
                    "type": "string",
                    "example": "First firmware"
                },
                "config": {
                    "$ref": "#/definitions/config"
                }
            }
        },
        "config": {
            "type": "object",
            "properties": {
                "board_name": {
                    "type": "string",
                    "example": "Wio Link v1.0"
                },
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/connection"
                    }
                }
            },
            "required": [
                "board_name",
                "connections"
            ]
        },
        "connection": {
            "type": "object",
            "properties": {
                "sku": {
                    "type": "string",
                    "example": "101020019-ffff"
                },
                "port": {
                    "type": "string",
                    "example": "D0"
                }
            },
            "required": [
                "sku",
                "port"
            ]
        },
        "ulb": {
            "type": "object",
            "properties": {
                "firmware_id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "encoding": {
                    "type": "string",
                    "enum": [
                        "plain",
                        "base64"
                    ]
                },
                "size": {
                    "type": "integer"
                },
                "sha": {
                    "type": "string"
                },
                "created_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "updated_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "binState": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "building",
                        "success",
                        "failure"
                    ],
                    "example": "building"
                },
                "status_text": {
                    "type": "string"
                }
            },
            "required": [
                "status"
            ]
        },
        "bin": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "firmwareImport": {
            "type": "object",
            "properties": {
                "firmware_id": {
                    "type": "string",
                    "example": "ad144ec3505641e29555e7de25aeaa08"
                },
                "github_url": {
                    "type": "string",
                    "example": "https://github.com/awong1900/Wio_Sample_Project"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "importing"
                    ],
                    "example": "pending"
                },
                "status_text": {
                    "type": "string",
                    "example": "waiting import..."
                },
                "created_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "updated_at": {
                    "$ref": "#/definitions/timestamp"
                }
            }
        },
        "driverSrc": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "driver_x.h"
                },
                "content": {
                    "type": "string",
                    "example": "here is the source code"
                }
            }
        },
        "driverObject": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "example": 2349724074207
                },
                "sku": {
                    "type": "string",
                    "example": 12864565
                },
                "firmware_id": {
                    "type": "string",
                    "example": "ad144ec3505641e29555e7de25aeaa08"
                },
                "created_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "updated_at": {
                    "$ref": "#/definitions/timestamp"
                },
                "firmware": {
                    "$ref": "#/definitions/firmware"
                }
            }
        }
    }
}